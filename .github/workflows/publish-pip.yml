name: Publish Python Packages

on:
  release:
    types: [published]
  push:
    tags:
      - lablink-allocator-service_v*
      - lablink-client-service_v*
  workflow_dispatch:
    inputs:
      package:
        type: choice
        options: [lablink-allocator-service, lablink-client-service]
        required: true
        description: Which package to publish
      dry_run:
        type: boolean
        default: true
        description: Build only (no publish)
      skip_tests:
        type: boolean
        default: false
        description: Skip test suite (not recommended)

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - package: lablink-allocator-service
            dir: lablink-allocator/lablink-allocator-service
            tag_prefix: lablink-allocator-service_v
            path_filter: lablink-allocator/lablink-allocator-service
          - package: lablink-client-service
            dir: lablink-client-base/lablink-client-service
            tag_prefix: lablink-client-service_v
            path_filter: lablink-client-base/lablink-client-service

    steps:
      # Check if this matrix job should run
      - name: Check if package matches trigger
        id: should_run
        run: |
          SHOULD_RUN=false

          if [ "${{ github.event_name }}" = "release" ]; then
            if [[ "${{ github.event.release.tag_name }}" == ${{ matrix.tag_prefix }}* ]]; then
              SHOULD_RUN=true
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            if [[ "$GITHUB_REF_NAME" == ${{ matrix.tag_prefix }}* ]]; then
              SHOULD_RUN=true
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.package }}" = "${{ matrix.package }}" ]; then
              SHOULD_RUN=true
            fi
          fi

          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "Package ${{ matrix.package }}: should_run=$SHOULD_RUN"

      - name: Checkout repository
        if: steps.should_run.outputs.should_run == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup UV
        if: steps.should_run.outputs.should_run == 'true'
        uses: astral-sh/setup-uv@v4
        with:
          python-version: '3.11'

      # GUARDRAIL 1: Branch verification
      - name: Verify release from main branch
        if: steps.should_run.outputs.should_run == 'true' && github.event_name == 'release'
        run: |
          if [ "${{ github.event.release.target_commitish }}" != "main" ]; then
            echo "❌ Releases must be created from main branch"
            echo "Current branch: ${{ github.event.release.target_commitish }}"
            exit 1
          fi
          echo "✅ Release from main branch"

      # GUARDRAIL 2: Version verification
      - name: Verify version matches tag
        if: steps.should_run.outputs.should_run == 'true' && github.event_name != 'workflow_dispatch'
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG_VERSION="${{ github.event.release.tag_name }}"
          else
            TAG_VERSION="${GITHUB_REF_NAME}"
          fi
          TAG_VERSION="${TAG_VERSION#${{ matrix.tag_prefix }}}"

          TOML_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)

          echo "Tag version: $TAG_VERSION"
          echo "pyproject.toml version: $TOML_VERSION"

          if [ "$TAG_VERSION" != "$TOML_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Please update version in pyproject.toml to $TAG_VERSION"
            exit 1
          fi
          echo "✅ Versions match: $TOML_VERSION"
        working-directory: ${{ matrix.dir }}

      # GUARDRAIL 3: Package metadata check
      - name: Verify package metadata
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)

          project = data.get('project', {})
          required = ['name', 'version', 'description', 'authors']
          missing = [k for k in required if k not in project]

          if missing:
              print(f'❌ Missing required metadata: {missing}')
              exit(1)

          # Verify package name matches expected
          if project['name'] != '${{ matrix.package }}':
              print(f\"❌ Package name mismatch: {project['name']} != ${{ matrix.package }}\")
              exit(1)

          print('✅ Package metadata complete:')
          print(f\"  Name: {project['name']}\")
          print(f\"  Version: {project['version']}\")
          print(f\"  Description: {project['description']}\")
          "
        working-directory: ${{ matrix.dir }}

      # Install dependencies
      - name: Install dependencies
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          uv sync --extra dev
        working-directory: ${{ matrix.dir }}

      # GUARDRAIL 4: Linting
      - name: Run linting
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          source .venv/bin/activate
          echo "Running ruff check..."
          uv run ruff check src tests
          echo "✅ Linting passed"
        working-directory: ${{ matrix.dir }}

      # GUARDRAIL 5: Test suite
      - name: Run tests
        if: steps.should_run.outputs.should_run == 'true' && inputs.skip_tests != 'true'
        run: |
          source .venv/bin/activate
          echo "Running test suite..."
          uv run pytest tests \
            --cov=src/${{ matrix.package }} \
            --cov-report=term-missing \
            --cov-fail-under=0
          echo "✅ Tests passed"
        working-directory: ${{ matrix.dir }}

      # GUARDRAIL 6: Build verification
      - name: Build package
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "Building package..."
          uv build
          echo "✅ Package built successfully"
          echo ""
          echo "Build artifacts:"
          ls -lh dist/
        working-directory: ${{ matrix.dir }}

      # PUBLISH (unless dry run)
      - name: Publish to PyPI
        id: publish
        if: |
          steps.should_run.outputs.should_run == 'true' &&
          (github.event_name != 'workflow_dispatch' ||
           inputs.dry_run == false)
        run: |
          echo "Publishing ${{ matrix.package }} to PyPI..."
          uv publish
          echo "✅ Published successfully!"
          echo ""
          echo "📦 Package published to PyPI"

          # Extract version for reference
          VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          echo ""
          echo "ℹ️  To build production Docker images with this version:"
          echo "   gh workflow run lablink-images.yml -f environment=prod -f package_version=${VERSION}"
        working-directory: ${{ matrix.dir }}

      # Dry run summary
      - name: Dry run summary
        if: steps.should_run.outputs.should_run == 'true' && github.event_name == 'workflow_dispatch' && inputs.dry_run == true
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 DRY RUN COMPLETE"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "✅ All guardrails passed:"
          echo "  • Package metadata verified"
          echo "  • Linting passed"
          echo "  • Tests passed"
          echo "  • Package built successfully"
          echo ""
          echo "Package was NOT published (dry_run=true)"
          echo ""
          echo "To publish, run workflow again with:"
          echo "  package: ${{ matrix.package }}"
          echo "  dry_run: false"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
