name: Terraform Deploy

on:
  push:
    branches:
      - test
      - main

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, test, prod)"
        required: true
        default: dev
      image_tag:
        description: "Docker image tag to deploy (only for prod)"
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::711387140753:role/github_lablink_repository-AE68499B37C7
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Determine Environment
        id: setenv
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            case "${{ github.event.inputs.environment }}" in
              dev|test|prod)
                echo "env=${{ github.event.inputs.environment }}" >> "$GITHUB_OUTPUT"
                ;;
              *)
                echo "Unsupported environment: ${{ github.event.inputs.environment }}"
                exit 1
                ;;
            esac
          elif [ "${{ github.ref_name }}" = "main" ]; then
            echo "env=prod" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            echo "env=test" >> "$GITHUB_OUTPUT"
          else
            echo "Unsupported branch or manual input"
            exit 1
          fi

      - name: Terraform Init
        run: |
          cd lablink-allocator
          if [ "${{ steps.setenv.outputs.env }}" = "dev" ]; then
            terraform init
          else
            terraform init -backend-config=backend-${{ steps.setenv.outputs.env }}.hcl
          fi

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: lablink-allocator

      - name: Terraform Validate
        run: terraform validate
        working-directory: lablink-allocator

      - name: Terraform Plan
        run: terraform plan -var="resource_suffix=${{ steps.setenv.outputs.env }}"
        working-directory: lablink-allocator

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -var="resource_suffix=${{ steps.setenv.outputs.env }}"
        working-directory: lablink-allocator
        continue-on-error: true

      - name: Save PEM Key to Artifact
        if: steps.apply.outcome == 'success'
        run: |
          cd lablink-allocator
          terraform output -raw private_key_pem > lablink-key.pem
          chmod 600 lablink-key.pem
          mkdir -p artifact-output
          mv lablink-key.pem artifact-output/

      - name: Upload PEM Artifact
        if: steps.apply.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: lablink-key-${{ steps.setenv.outputs.env }}
          path: artifact-output/lablink-key.pem
          retention-days: 1

      - name: Output EC2 IP
        if: steps.apply.outcome == 'success'
        run: |
          cd lablink-allocator
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2 Public IP: $EC2_IP"
          echo "{\"DB_HOST\": \"${EC2_IP}\"}" > postgre_ip.json

      - name: Terraform Destroy on Failure
        if: steps.apply.outcome == 'failure'
        run: terraform destroy -auto-approve -var="resource_suffix=${{ steps.setenv.outputs.env }}"
        working-directory: lablink-allocator

      - name: Deployment Summary
        if: steps.apply.outcome == 'success'
        run: |
          echo "âœ… Deployment succeeded!"
          echo "Environment: ${{ steps.setenv.outputs.env }}"
          jq -r .DB_HOST lablink-allocator/postgre_ip.json
