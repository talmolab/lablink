name: CI for Lablink Services

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "lablink-client-base/lablink-client-service/**"
      - "lablink-allocator/lablink-allocator-service/**"
      - ".github/workflows/ci.yml"

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    name: Lint - ${{ matrix.package }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: lablink-client-service
            python-version: "3.10"
            working-directory: lablink-client-base/lablink-client-service
            ruff-command: "uv run ruff check src tests"
          - package: lablink-allocator-service
            python-version: "3.10"
            working-directory: lablink-allocator/lablink-allocator-service
            ruff-command: "uv run ruff check src tests"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: ${{ matrix.working-directory }}
        run: uv sync --all-extras

      - name: Run ruff linter
        working-directory: ${{ matrix.working-directory }}
        run: ${{ matrix.ruff-command }}

  test:
    name: Test - ${{ matrix.package }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: lablink-client-service
            python-version: "3.10"
            working-directory: lablink-client-base/lablink-client-service
            test-command: "uv run pytest tests --cov=src/lablink_client_service --cov-report=term-missing:skip-covered --cov-report=xml --cov-report=html"
          - package: lablink-allocator-service
            python-version: "3.10"
            working-directory: lablink-allocator/lablink-allocator-service
            test-command: "uv run pytest tests --maxfail=1 --disable-warnings --cov=. --cov-report=xml --cov-report=term"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: ${{ matrix.working-directory }}
        run: |
          uv sync --all-extras

      - name: Run tests
        working-directory: ${{ matrix.working-directory }}
        run: ${{ matrix.test-command }}

  docker-build-test-allocator:
    name: Docker Build Test - Allocator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build allocator dev Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: lablink-allocator/Dockerfile.dev
          tags: lablink-allocator-dev:test
          push: false
          load: true

      - name: Verify venv activation
        run: |
          echo "✅ Testing venv activation..."
          docker run --rm lablink-allocator-dev:test bash -c "source /app/.venv/bin/activate && python -c 'import sys; print(\"✅ venv activated:\", sys.prefix); assert \"lablink-allocator-service/.venv\" in sys.prefix'"

      - name: Verify console scripts exist
        run: |
          echo "✅ Testing console scripts exist..."
          docker run --rm lablink-allocator-dev:test bash -c "source /app/.venv/bin/activate && which lablink-allocator && which generate-init-sql && echo 'Console scripts found'"

      - name: Verify dev dependencies installed
        run: |
          echo "✅ Testing dev dependencies..."
          docker run --rm lablink-allocator-dev:test bash -c "source /app/.venv/bin/activate && python -c 'import pytest; import ruff; import coverage; print(\"✅ Dev dependencies available\")'"

      - name: Verify package imports
        run: |
          echo "✅ Testing package imports..."
          docker run --rm lablink-allocator-dev:test bash -c "source /app/.venv/bin/activate && python -c 'from lablink_allocator_service.main import main; from lablink_allocator_service.database import PostgresqlDatabase; from lablink_allocator_service.get_config import get_config; print(\"✅ Package imports successful\")' 2>&1 | grep -E '(✅|Error|Traceback)'"

      - name: Verify uv sync created proper installation
        run: |
          echo "✅ Testing uv sync installation..."
          docker run --rm lablink-allocator-dev:test bash -c "source /app/.venv/bin/activate && pip list | grep lablink-allocator-service && echo '✅ Package installed via uv sync'"
