# Base image with GPU support
FROM nvidia/cuda:12.8.1-cudnn-devel-ubuntu22.04

# https://askubuntu.com/questions/1402167/must-specify-the-user-name-option-when-running-as-root-chrome-remote-desktop
# Must be a non-root user to run Chrome Remote Desktop
ARG USERNAME="client"

# Set non-interactive mode
ENV DEBIAN_FRONTEND=noninteractive

# Set user
ENV USER=root

# Set NVIDIA driver capabilities
ENV NVIDIA_DRIVER_CAPABILITIES=all

# Install dependencies
# opencv requires opengl https://github.com/conda-forge/opencv-feedstock/issues/401
# Default python3 is 3.8 in ubuntu 20.04 https://wiki.ubuntu.com/FocalFossa/ReleaseNotes#Python3_by_default
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build tools / base
    build-essential gcc-10-base libgcc-s1 curl wget git sudo gnupg2 psmisc \
    # GL/OpenGL
    libgl1-mesa-glx libglapi-mesa libegl-mesa0 libegl1 libopengl0 libgl1 \
    # Fonts
    fonts-dejavu fontconfig libfontconfig1 libfreetype6 fonts-liberation \
    # DBus / Kerberos
    dbus-x11 libdbus-1-3 libgssapi-krb5-2 \
    # X11 / input
    libx11-xcb1 libxrender1 libxrandr2 libxfixes3 libxi6 libxtst6 \
    libxcomposite1 libxdamage1 xserver-xorg-video-dummy xvfb \
    # xcb + Qt platform deps (Qt 6.5+ needs xcb-cursor)
    libxcb-cursor0 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
    libxcb-keysyms1 libxcb-render-util0 \
    # Vulkan (optional for Chrome)
    libvulkan1 \
    # Desktop (XFCE)
    xfce4 xfce4-goodies xfce4-terminal elementary-xfce-icon-theme \
    desktop-base \
    # Session helpers
    xscreensaver libutempter0 \
    # Utils
    xdg-utils \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


# Install Chrome Remote Desktop
RUN  curl https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /etc/apt/trusted.gpg.d/chrome-remote-desktop.gpg && \
    # Add the Chrome Remote Desktop repository
    echo "deb [arch=amd64] https://dl.google.com/linux/chrome-remote-desktop/deb stable main" > /etc/apt/sources.list.d/chrome-remote-desktop.list && \
    # Update package lists and install Chrome Remote Desktop
    apt-get update && apt-get install --assume-yes chrome-remote-desktop && \
    # Clean up to reduce image size
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Configure Chrome Remote Desktop to use Gnome by default
RUN echo "exec /etc/X11/Xsession /usr/bin/xfce4-session" > /etc/chrome-remote-desktop-session


# Because there is no display connected to your instance, disable the display manager service on your instance
RUN systemctl disable lightdm.service

# Install Chrome browser
RUN curl -L -o google-chrome-stable_current_amd64.deb \
    https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
    apt install --assume-yes --fix-broken ./google-chrome-stable_current_amd64.deb && \
    rm google-chrome-stable_current_amd64.deb

# Configure Google Chrome to run without sandboxing
# This is necessary for Chrome Remote Desktop to work properly in a container environment.
# Create a directory for wrapper scripts
RUN rm -f /usr/bin/google-chrome && \
    echo '#!/bin/bash' > /usr/bin/google-chrome && \
    echo 'exec /opt/google/chrome/google-chrome --no-sandbox --disable-gpu --disable-software-rasterizer --disable-dev-shm-usage "$@"' >> /usr/bin/google-chrome && \
    chmod +x /usr/bin/google-chrome

# Do the same for the stable version of Google Chrome
RUN rm -f /usr/bin/google-chrome-stable && \
    echo '#!/bin/bash' > /usr/bin/google-chrome-stable && \
    echo 'exec /opt/google/chrome/google-chrome --no-sandbox --disable-gpu --disable-software-rasterizer --disable-dev-shm-usage "$@"' >> /usr/bin/google-chrome-stable && \
    chmod +x /usr/bin/google-chrome-stable

# Create the user USERNAME
RUN useradd -m -s /bin/bash ${USERNAME} && echo "${USERNAME}:password" | chpasswd && \
    echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/${USERNAME} && \
    chmod 0440 /etc/sudoers.d/${USERNAME} && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}

# Add USERNAME to the chrome-remote-desktop group
RUN usermod -aG chrome-remote-desktop ${USERNAME}

# Ensure Chrome directories are accessible to the client user
RUN mkdir -p /home/${USERNAME}/.config/google-chrome && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.config

# Switch to non-root user for Google Chrome Remote Desktop to work.
USER ${USERNAME}
WORKDIR /home/${USERNAME}

# Create scripts directory with miniforge, uv, and nvm installation scripts
COPY lablink-client-base-image/install_miniforge.sh lablink-client-base-image/install_nvm.sh /scripts/

# Make scripts executable and run them
RUN sudo chmod +x /scripts/*.sh && \
    /scripts/install_miniforge.sh && \
    /scripts/install_nvm.sh

# Build argument for package version
ARG PACKAGE_VERSION=0.0.7a0

# Download the latest uv release from GitHub
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Install client service package from PyPI in a virtual environment
RUN uv venv /home/${USERNAME}/.venv && \
    uv pip install --python=/home/${USERNAME}/.venv/bin/python lablink-client-service==${PACKAGE_VERSION}

# Copy the startup script
COPY lablink-client-base-image/start.sh /home/${USERNAME}/start.sh
RUN sudo chmod +x /home/${USERNAME}/start.sh

# Run the startup script
CMD ["/home/client/start.sh"]
